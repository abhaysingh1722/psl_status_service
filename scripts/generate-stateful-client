#!/usr/bin/env node
var api = require('../src/api.json')
var isRequired = param=> param.required === 'Required'
var _ = require('lodash')

var allMethods = Object.keys(api).sort().map(method=> {
  return api[method].filter(isRequired).map(param=> param.name).concat(method)
})

// filter the array by methods that require token
var tokened = allMethods.filter(x=> x[0] === 'token')
var strs = tokened.map(x=>_.last(x))

var result = {}
strs.forEach(stfu=> {
  result = _.set(result, stfu, {})
})

// generate the client with all methods bound with token
// front matter in str
var str = `
// generated by ./scripts/generate-stateful-client
export default function client(token) {
`

// construct the namespace
str += '  var applied = ' + JSON.stringify(result, null, 2).replace(/"/g, '')
str += '\n\n'

// fill in the methods
tokened.forEach(t=> {
  var methodName = _.last(t)
  str += `  applied.${methodName} = function (params, callback) {
    params.token = token
    require('./${methodName}').call({}, params, callback)
  }\n`
})

str += `
  return applied
}
`

console.log(str)
